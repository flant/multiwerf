name: Tests
on:
  pull_request:
    branches:
      - master
env:
  GO111MODULE: on

jobs:

  tests:
    name: Go Test (with coverage)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download modules
      run: go mod download
      shell: bash

    - name: Prepare environment
      run: |
        export MULTIWERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/${{ matrix.os }}
        mkdir -p $MULTIWERF_TEST_COVERAGE_DIR
        echo ::set-env name=MULTIWERF_TEST_COVERAGE_DIR::$MULTIWERF_TEST_COVERAGE_DIR

        ./scripts/tests/multiwerf_with_coverage.sh
      shell: bash

    - name: Run tests
      run: MULTIWERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/multiwerf_with_coverage go test ./...
      shell: bash

    - name: FIXME
      run: |
        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|$GITHUB_WORKSPACE|github.com/flant/multiwerf|g" {} +
      shell: bash
      if: matrix.os == 'ubuntu-latest'

    - name: FIXME
      run: |
        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e 's|D:\\a\\multiwerf\\multiwerf\\cmd\\multiwerf\\main.go|github.com/flant/multiwerf/cmd/multiwerf/main.go|g' {} +
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: FIXME
      run: |
        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
         sed -i '' -e "s|$GITHUB_WORKSPACE|github.com/flant/multiwerf|g" {} +
      shell: bash
      if: matrix.os == 'macOS-latest'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  use_command:
    name: Use Command
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        shell: [sh, bash, cmd, powershell]
        exclude:
          - os: ubuntu-latest
            shell: cmd
          - os: ubuntu-latest
            shell: powershell
          - os: macOS-latest
            shell: cmd
          - os: macOS-latest
            shell: powershell
          - os: windows-latest
            shell: sh
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Build multiwerf
      run: |
        export GOBIN=$GITHUB_WORKSPACE
        echo "::add-path::$GOBIN"
        ./go-build.sh
      shell: bash

    - name: Install werf
      run: |
        export MULTIWERF_SELF_UPDATE=no
        . $(multiwerf use 1.0 stable --shell default --as-file)
        werf
      shell: sh
      if: matrix.shell == 'sh'

    - name: Install werf
      run: |
        export MULTIWERF_SELF_UPDATE=no
        . $(multiwerf use 1.0 stable --shell default --as-file)
        werf
      shell: bash
      if: matrix.shell == 'bash'

    - name: Install werf
      run: |
        set MULTIWERF_SELF_UPDATE=no
        FOR /F "tokens=*" %%g IN ('multiwerf use 1.0 stable --as-file --shell cmdexe') do (SET WERF_USE_SCRIPT_PATH=%%g)
        %WERF_USE_SCRIPT_PATH%
        werf
      shell: cmd
      if: matrix.shell == 'cmd'

    - name: Install werf
      run: |
        set MULTIWERF_SELF_UPDATE=no
        Invoke-Expression -Command "multiwerf use 1.0 stable --as-file --shell powershell" | Out-String -OutVariable WERF_USE_SCRIPT_PATH
        . $WERF_USE_SCRIPT_PATH.Trim()
        werf
      shell: powershell
      if: matrix.shell == 'powershell'

  upload_coverage:
    name: Upload coverage
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Install codeclimate test-reporter
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

    - name: Prepare coverage file
      run: |
        coverage_files=$(find tests_coverage -name '*.out')
        for file in ${coverage_files[@]}
        do
          file_name=$(echo $file | tr / _)
          ./cc-test-reporter format-coverage \
            -t=gocov \
            -o="coverage/$file_name.codeclimate.json" \
            -p=github.com/flant/multiwerf/ \
            "$file"
        done

        ./cc-test-reporter sum-coverage \
          -p=$(ls -1q coverage/*.codeclimate.json | wc -l) \
          coverage/*.codeclimate.json

    - name: Upload
      run: ./cc-test-reporter upload-coverage
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
